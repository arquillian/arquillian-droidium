import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.android.*
import org.arquillian.spacelift.execution.Tasks
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.arquillian.*
import org.arquillian.spacelift.process.impl.CommandTool
import org.arquillian.spacelift.process.CommandBuilder
import java.io.File
import org.apache.commons.io.FileUtils

defaultTasks 'test'
apply plugin: 'spacelift'

ext {
    defaultAndroid_avd_1 = "android_1"
    defaultAndroid_avd_2 = "android_2"
    defaultArquillian_debug = "true"
    defaultEmulatorMemory = "1024"
    defaultEmulatorTimeout = "300"
    defaultAndroidSdkVersion = "23"
    defaultAndroidTarget = "android-19"
    defaultAndroidAbi = "default/x86"
    defaultBrowser = "phantomjs"
    defaultDeviceSerialId = ""
    defaultRemoteVideoDir = "/sdcard/"
    defaultAndroidBuildTools = "22.1.2"

    droidiumVersion = "1.0.0.Final"

    // downloads from GitHub
    selendroidOrganization = "selendroid"
    selendroidVersion = "0.15.0"
    selendroidCommit = "0.15.0"

    // downloads from GitHub
    recorderOrganization = "arquillian"
    recorderVersion = "1.1.0.Alpha1"
    recorderCommit = "1.1.0.Alpha1"

    coreVersion = "1.1.9.Final"
    grapheneVersion = "2.1.0.Alpha2"
    seleniumVersion = "2.45.0"

    // Arquillian Drone
    droneOrganization = "arquillian"
    droneVersion = "2.0.0.Alpha5"
    droneCommit = "2.0.0.Alpha5"

    defaultAdditionalAndroidTargets = [
        'android-10',
        'android-16', // Selendroid needs that
        'Google Inc.:Google APIs:19',
        'Google Inc.:Google APIs (x86 System Image):19',
    ]

    defaultDroidiumTestProjects = [
        'droidium-multiple-androids-with-jboss-01',
        'droidium-multiple-androids-01',
        'droidium-multiple-androids-02',
        'droidium-multiple-containers-01',
        'droidium-multiple-containers-02',
        'droidium-multiple-containers-03',
        'droidium-multiple-deployments-01',
        'droidium-native-01',
        'droidium-native-01-scala',
        'droidium-native-02',
        //'droidium-hybrid-01',
        'droidium-screenshooter-01',
    ]

    defaultDroidiumRecorderTestProjects = [
        'droidium-recorder-01',
        'droidium-recorder-02'
    ]

    defaultDroidiumDeviceSelectionProjects = [
        'droidium-device-selection'
    ]

    needAndroidTestApk = [
        'droidium-multiple-androids-01',
        'droidium-multiple-androids-02',
        'droidium-multiple-androids-with-jboss-01',
        'droidium-multiple-deployments-01',
        'droidium-native-01',
        'droidium-multiple-containers-01'
    ]
}

spacelift {

    workspace = new File(project.rootDir, ".ws")
    installationsDir = new File(workspace, "installations")

    tools {
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")
                def maven_path = System.getenv("MAVEN_PATH")

                def enableStaging = [ "-Pjboss-staging-repository-group" ]

                if (maven_path != null && !maven_path.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder(maven_path).parameters(enableStaging))
                }
                if (m2 != null && !m2.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2}/mvn").parameters(enableStaging))
                } else if (m2_home != null && !m2_home.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2_home}/bin/mvn").parameters(enableStaging))
                } else {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("mvn").parameters(enableStaging))
                }
            }
        }
    }

    profiles {
        'default' {
            tests 'droidiumTests'
            enabledInstallations 'androidSdk', 'arquillianRecorder', 'selendroid', 'drone', 'droidium'
        }

        'deviceSelection' {
            tests 'deviceSelectionTest'
            enabledInstallations 'androidSdk', 'arquillianRecorder', 'selendroid', 'droidium'
        }

        'droidiumRecorder' {
            tests 'droidiumRecorderTests'
            enabledInstallations 'androidSdk', 'arquillianRecorder', 'selendroid', 'drone', 'droidium'
        }

        'droidiumInternal' {
            tests (
                'droidiumInternalTestsAutomatic',
                'droidiumInternalTestsManualEmulator',
                'droidiumInternalTestsConfiguration',
            )
            enabledInstallations 'arquillianRecorder', 'androidSdk'
        }

        'droidiumInternalPhysical' {
            tests 'droidiumInternalTestsPhyiscalDevice'
            enabledInstallations 'arquillianRecorder', 'androidSdk'
        }
    }

    installations {

        droidium {
            product 'droidium'
            version project.droidiumVersion

            postActions {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parentFile.absolutePath}/pom.xml")
                    .property('maven.test.skip=true')
                    .goals('clean','install')
                    .execute().await()

                Tasks.chain([
                        'version.droidium': "${project.droidiumVersion}",
                        'version.arquillian.core': "${project.coreVersion}",
                        'version.arquillian.drone': "${project.droneVersion}",
                        'version.arquillian.graphene': "${project.grapheneVersion}",
                        'version.selendroid': "${project.selendroidVersion}",
                        'version.selenium': "${project.seleniumVersion}",
                    ], PomXmlUpdater).dir(dir: project.rootDir, excludes: [ ".ws/**" ]).execute().await()
            }
        }

        drone {
            product 'drone'
            version project.droneCommit
            remoteUrl "https://github.com/${project.droneOrganization}/arquillian-extension-drone/archive/${version}.zip"
            home "arquillian-extension-drone-${version}"

            postActions {
                if (! new File(project.spacelift.workspace, ".repository/org/jboss/arquillian/extension/arquillian-drone-aggregator/${project.droneVersion}").exists()) {
                    Tasks.prepare(MavenExecutor).pom("${home.absolutePath}/pom.xml")
                        .goal('install')
                        .property('maven.test.skip=true')
                        .execute().await()
                }

                Tasks.chain([
                        'version.arquillian.drone': "${project.droneVersion}"
                    ], PomXmlUpdater).dir(dir: project.rootDir, excludes: [ ".ws/**" ]).execute().await()
            }
        }

        arquillianRecorder {
            product 'recorder'
            version project.recorderCommit
            remoteUrl "https://github.com/${project.recorderOrganization}/arquillian-recorder/archive/${version}.zip"
            home "arquillian-recorder-${version}"

            postActions {
                if (! new File(project.spacelift.workspace, ".repository/org/arquillian/extension/arquillian-recorder/${project.recorderVersion}").exists()) {
                    Tasks.prepare(MavenExecutor).pom("${home.absolutePath}/pom.xml")
                        .goal('install')
                        .property('maven.test.skip=true')
                        .execute().await()
                }

                Tasks.chain([
                        'android.remote.video.dir': "${project.remoteVideoDir}"
                    ], PomXmlUpdater).dir(dir: project.rootDir, excludes: [ ".ws/**" ]).execute().await()
            }
        }

        selendroid {
            product 'selendroid'
            version project.selendroidCommit
            remoteUrl "https://github.com/${project.selendroidOrganization}/selendroid/archive/${version}.zip"
            home "selendroid-${version}"

            extractMapper {
                toDir(home)
                cutdirs()
            }

            postActions {
                if (! new File(project.spacelift.workspace, ".repository/io/selendroid/selendroid/${project.selendroidVersion}").exists()) {

                    Tasks.prepare(MavenExecutor)
                        .goal("install:install-file")
                        .properties("file=${selendroid.home}/third-party/cordova-3.7.0/classes.jar",
                            "groupId=org.apache.cordova", "artifactId=cordova", "version=3.7.0", "classifier=android", "packaging=jar")
                        .execute().await()

                    Tasks.prepare(MavenExecutor).pom("${home.absolutePath}/pom.xml")
                        .goal('install')
                        .property('maven.test.skip=true')
                        .env([ANDROID_HOME : androidSdk.home.absolutePath])
                        .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                        .execute().await()
                }

                Tasks.chain([
                        'selendroid.test.app': "${home}/selendroid-test-app/target/selendroid-test-app-${project.selendroidVersion}.apk",
                        'selendroid.server.apk': "${home}/selendroid-server/target/selendroid-server-${project.selendroidVersion}.apk",
                        'selendroid.driver.apk': "${home}/android-driver/target/android-driver-app-${project.selendroidVersion}.apk"
                    ], PomXmlUpdater).dir(dir: project.rootDir, excludes: [ ".ws/**" ]).execute().await()
            }
        }

        androidSdk {
            product 'androidSdk'
            version { project.androidSdkVersion }
            remoteUrl { "http://dl.google.com/android/android-sdk_r${project.androidSdkVersion}-linux.tgz" }
            home "android-sdk-linux"

            tools {
                android {
                    command {
                        Tasks.prepare(CommandTool).programName("${androidSdk.home.absolutePath}/tools/android")
                            .addEnvironment("ANDROID_HOME", androidSdk.home.absolutePath)
                            .addEnvironment("ANDROID_SDK_HOME", project.spacelift.workspace.absolutePath)
                    }
                }
                adb {
                    command {
                        Tasks.prepare(CommandTool).programName("${androidSdk.home.absolutePath}/platform-tools/adb")
                            .addEnvironment("ANDROID_HOME", androidSdk.home.absolutePath)
                            .addEnvironment("ANDROID_SDK_HOME", project.spacelift.workspace.absolutePath)
                    }
                }
                emulator {
                    command {
                        Tasks.prepare(CommandTool).programName("${androidSdk.home.absolutePath}/tools/emulator")
                            .addEnvironment("ANDROID_HOME", androidSdk.home.absolutePath)
                            .addEnvironment("ANDROID_SDK_HOME", project.spacelift.workspace.absolutePath)
                    }
                }
            }

            postActions {
                project.ant.chmod(dir: "${home}/tools", perm:"a+x", includes:"*", excludes:"*.txt")

                Tasks.prepare(AndroidSdkUpdater).buildTools(project.androidBuildTools).target(project.androidTarget).execute().await()

                project.additionalAndroidTargets.each { target ->
                    Tasks.prepare(AndroidSdkUpdater).target(target).execute().await()
                }

                Tasks.prepare(AndroidSdkOptForStats).execute().await()

                project.ant.delete(dir: "${project.spacelift.workspace}/.android/avd/", failonerror: false)
            }
        }
    }

    tests {
        droidiumTests {

            dataProvider {
                project.droidiumTestProjects
            }

            beforeSuite {
                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi(project.androidAbi)
                    .name(project.android_avd_1)
                    .force()
                    .execute().await()

                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi(project.androidAbi)
                    .name(project.android_avd_2)
                    .force()
                    .execute().await()

                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_1)
                    .parameters(['-no-audio', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .execute().await()

                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_2)
                    .port(5556)
                    .parameters(['-no-audio', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .execute().await()
            }

            beforeTest { droidiumTest ->
                if (project.needAndroidTestApk.contains(droidiumTest)) {
                    project.ant.copy(file: new File(project.rootDir, "aerogear-test-android.apk"),
                        todir: new File(project.rootDir, droidiumTest),
                        failonerror: false,
                        overwrite: true)
                }
            }

            execute { droidiumTest ->
                Tasks.prepare(MavenExecutor).pom("${project.rootDir}/${droidiumTest}/pom.xml")
                    .goals('clean', 'test')
                    .property("android.avd.name=${project.android_avd_1}")
                    .property("android.avd.name_1=${project.android_avd_1}")
                    .property("android.avd.name_2=${project.android_avd_2}")
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .property("browser=${project.browser}")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath ])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .execute().await()
            }

            afterTest { droidiumTest ->
                if (project.needAndroidTestApk.contains(droidiumTest)) {
                    File projectDir = new File(project.rootDir, droidiumTest)
                    project.ant.delete(file: new File(projectDir, "aerogear-test-android.apk"), failonerror: false)
                }
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }

            afterSuite {
                Tasks.prepare(AndroidEmulatorStopper).execute().await()
                Tasks.prepare(AndroidEmulatorStopper).device("emulator-5556").execute().await()

                FileUtils.listFiles(project.rootDir, null, true).each { file ->
                    if (!file.absolutePath.contains("target")
                        && !file.absolutePath.startsWith(project.spacelift.workspace.absolutePath)
                        && !file.absolutePath.startsWith(project.spacelift.installationsDir.absolutePath)) {

                        if (file.name.contains("arquillian.xml.backup") || file.name.contains("pom.xml.backup")) {
                            file.delete()
                        }

                        if (file.name.equals("pom.xml") || file.name.equals("arquillian.xml")) {
                            Tasks.prepare(CommandTool).programName("git").parameter("checkout").parameter(file.absolutePath).execute().await()
                        }
                    }   
                }
            }
        }

        deviceSelectionTest {

            dataProvider {
                project.droidiumDeviceSelectionProjects
            }

            beforeTest {
                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi(project.androidAbi)
                    .name(project.android_avd_1)
                    .force()
                    .execute().await()

                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_1)
                    .parameters(['-no-audio', '-no-window', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .execute().await()
            }

            execute { droidiumTest ->
                Tasks.prepare(MavenExecutor).pom("${project.rootDir}/${droidiumTest}/pom.xml")
                    .goals('clean', 'test')
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .execute().await()
            }

            afterTest {
                Tasks.prepare(AndroidEmulatorStopper).execute().await()
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

        droidiumRecorderTests {

            dataProvider {
                project.droidiumRecorderTestProjects
            }

            execute { droidiumTest ->
                Tasks.prepare(MavenExecutor).pom("${project.rootDir}/${droidiumTest}/pom.xml")
                    .goals('clean', 'test')
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .execute().await()
            }

            afterTest {
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

        // execution of integration tests of Droidium itself

        droidiumInternalTestsAutomatic {

            beforeTest {
                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi(project.androidAbi)
                    .name(project.android_avd_1)
                    .force()
                    .execute().await()
            }

            execute {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parent}")
                    .goals('clean', 'test')
                    .profile("android-automatic")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .property("emulator.startup.abi=${project.androidAbi}")
                    .property("emulator.startup.target=${project.androidTarget}")
                    .property("emulator.to.run.avd.name=${project.android_avd_1}")
                    .property("emulator.to.run.console.port=5556")
                    .execute().await()
            }

            afterTest {
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

        droidiumInternalTestsManualEmulator {

            beforeTest {

                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi(project.androidAbi)
                    .name(project.android_avd_1)
                    .force()
                    .execute().await()

                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_1)
                    .parameters(['-no-audio', '-no-window', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .port(5554)
                    .execute().await()
            }

            execute {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parent}")
                    .goals('clean', 'test')
                    .profile("android-manual-emulator")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .property("emulator.running.avd.name=${project.android_avd_1}")
                    .property("emulator.running.console.port=5554")
                    .execute().await()
            }

            afterTest {
                Tasks.prepare(AndroidEmulatorStopper).execute().await()
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

        droidiumInternalTestsConfiguration {

            execute {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parent}")
                    .goals('clean', 'test')
                    .profile("android-manual-configuration")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .execute().await()
            }

            afterTest {
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

        droidiumInternalTestsPhyiscalDevice {

            // please specify -PdeviceSerialId=_serial_id_ of connected physical device

            execute {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parent}")
                    .goals('clean', 'test')
                    .profile("android-manual-real")
                    .env([ANDROID_HOME : androidSdk.home.absolutePath])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .property("device.serial.id=${project.deviceSerialId}")
                    .execute().await()
            }

            afterTest {
                project.ant.delete(dir: project.spacelift.workspace.absolutePath + "/.droidium_tmp", failonerror: false)
            }
        }

    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-5'
        classpath 'commons-io:commons-io:2.4'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
