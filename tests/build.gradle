import org.arquillian.spacelift.gradle.*
import org.arquillian.spacelift.gradle.android.*
import org.arquillian.spacelift.execution.Tasks
import org.arquillian.spacelift.gradle.maven.*
import org.arquillian.spacelift.gradle.arquillian.*
import org.arquillian.spacelift.process.impl.CommandTool
import org.arquillian.spacelift.process.CommandBuilder
import java.io.File
import org.apache.commons.io.FileUtils

defaultTasks 'test'
apply plugin: 'spacelift'

ext {
    defaultAndroid_avd_1 = "android_1"
    defaultAndroid_avd_2 = "android_2"
    defaultArquillian_debug = "true"
    defaultEmulatorMemory = "1024"
    defaultEmulatorTimeout = "300"
    defaultAndroidSdkVersion = "23"
    defaultAndroidTarget = "android-19"
    defaultAndroidTargetSelendroid = "android-16"

    droidiumVersion = "1.0.0.Beta1-SNAPSHOT"
    selendroidCommit = "cd07b1aaf1c34c085b27aa0b33bf24d2767a9865"
    selendroidVersion = "0.13.0-SNAPSHOT"
    recorderScreenshooterVersion = "1.0.0.Alpha4"
    spaceliftVersion = "1.0.0.Alpha3"
    ddmlibVersion = "23.1.3"
    coreVersion = "1.1.5.Final"
    droneVersion = "2.0.0.Alpha2"
    grapheneVersion = "2.1.0.Alpha1"
    seleniumVersion = "2.42.2"

    droidiumTestProjects = [
        'droidium-multiple-androids-with-jboss-01',
        'droidium-multiple-androids-01',
        'droidium-multiple-androids-02',
        'droidium-multiple-containers-01',
        'droidium-multiple-containers-02',
        'droidium-multiple-containers-03',
        'droidium-multiple-deployments-01',
        'droidium-native-01',
        'droidium-native-01-scala',
        'droidium-native-02',
        //'droidium-hybrid-01',
        'droidium-screenshooter-01',
    ]

    needAndroidTestApk = [
        'droidium-multiple-androids-01',
        'droidium-multiple-androids-02',
        'droidium-multiple-androids-with-jboss-01',
        'droidium-multiple-deployments-01',
        'droidium-native-01',
        'droidium-multiple-containers-01'
    ]
}

spacelift {

    workspace = new File(project.rootDir, ".ws")
    installationsDir = new File(workspace, "installations")

    tools {
        mvn {
            command {
                def m2 = System.getenv("M2")
                def m2_home = System.getenv("M2_HOME")

                if (m2 != null && !m2.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2}/mvn"))
                } else if (m2_home != null && !m2_home.isEmpty()) {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("${m2_home}/bin/mvn"))
                } else {
                    return Tasks.prepare(CommandTool).command(new CommandBuilder("mvn"))
                }
            }
        }
    }

    profiles {
        'default' {
            enabledInstallations 'droidium', 'androidSdk', 'selendroid'
            tests 'droidiumTests'
        }
    }

    installations {

        droidium {
            product 'droidium'
            version project.droidiumVersion

            postActions {
                Tasks.prepare(MavenExecutor).pom("${project.rootDir.parentFile.absolutePath}/pom.xml")
                    .property('maven.test.skip=true')
                    .goals('clean','install')
                    .execute().await()

                Tasks.chain([
                        'version.droidium': "${project.droidiumVersion}",
                        'version.arquillian.core': "${project.coreVersion}",
                        'version.arquillian.drone': "${project.droneVersion}",
                        'version.org.jboss.arquillian.drone': "${project.droneVersion}",
                        'version.arquillian.graphene': "${project.grapheneVersion}",
                        'version.droidium': "${project.droidiumVersion}",
                        'version.selendroid': "${project.selendroidVersion}",
                        'version.spacelift': "${project.spaceliftVersion}",
                        'version.ddmlib': "${project.ddmlibVersion}",
                        'version.selenium': "${project.seleniumVersion}",
                        'version.recorder.screenshooter' : "${project.recorderScreenshooterVersion}"
                    ], PomXmlUpdater).dir(project.rootDir).execute().await()
            }
        }

        selendroid {
            product 'selendroid'
            version project.selendroidCommit
            remoteUrl "https://github.com/selendroid/selendroid/archive/${version}.zip"
            home "selendroid-${version}"

            postActions {
                if (!new File(home, "selendroid-server/target").exists()) {
                    Tasks.prepare(MavenExecutor).pom("${home}/pom.xml")
                        .goal('install')
                        .property('maven.test.skip=true')
                        .env([ANDROID_HOME : project.spacelift.workspace.absolutePath + "/android-sdk-linux"])
                        .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                        .execute().await()
                }

                Tasks.chain([
                        'selendroid.test.app': "${home}/selendroid-test-app/target/selendroid-test-app-${project.selendroidVersion}.apk",
                        'selendroid.server.apk': "${home}/selendroid-server/target/selendroid-server-${project.selendroidVersion}.apk",
                        'selendroid.driver.apk': "${home}/android-driver/target/android-driver-app-${project.selendroidVersion}.apk"
                    ], PomXmlUpdater).dir(project.rootDir).execute().await()
            }
        }

        androidSdk {
            product 'androidSdk'
            version { project.androidSdkVersion }

            remoteUrl ([
                linux: { "http://dl.google.com/android/android-sdk_r${project.androidSdkVersion}-linux.tgz" },
                windows: { "http://dl.google.com/android/android-sdk_r${project.androidSdkVersion}-windows.zip" },
                mac: { "http://dl.google.com/android/android-sdk_r${project.androidSdkVersion}-macosx.zip" },
                solaris: { "http://dl.google.com/android/android-sdk_r${project.androidSdkVersion}-linux.tgz" }
            ])

            home ([
                linux: "android-sdk-linux",
                windows:"android-sdk-windows",
                mac: "android-sdk-macosx",
                solaris: "android-sdk-linux"
            ])

            tools {
                android {
                    command ([
                        linux: [ "${home}/tools/android" ],
                         mac: [ "${home}/tools/android" ],
                         windows: [ "cmd.exe", "/C", "${home}/tools/android.bat" ],
                         solaris: [ "${home}/tools/android" ]
                    ])
                }
                adb {
                    command ([
                        linux: [ "${home}/platform-tools/adb" ],
                        mac: [ "${home}/platform-tools/adb" ],
                        windows: [ "cmd.exe", "/C", "${home}/platform-tools/adb.bat" ],
                        solaris: [ "${home}/platform-tools/adb" ]
                    ])
                }
                emulator {
                    command ([
                        linux: [ "${home}/tools/emulator" ],
                        mac: [ "${home}/tools/emulator" ],
                        windows: [ "cmd.exe", "/C", "${home}/tools/emulator.bat" ],
                        solaris: [ "${home}/tools/emulator" ]
                   ])
                }
            }

            postActions {
                project.ant.chmod(dir: "${home}/tools", perm:"a+x", includes:"*", excludes:"*.txt")

                Tasks.prepare(AndroidSdkUpdater).target(project.androidTarget).execute().await()
                Tasks.prepare(AndroidSdkUpdater).target(project.androidTargetSelendroid).execute().await()

                Tasks.prepare(AndroidSdkOptForStats).execute().await()

                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi("default/x86")
                    .name(project.android_avd_1)
                    .force()
                    .execute().await()

                Tasks.prepare(AVDCreator)
                    .target(project.androidTarget)
                    .abi("default/x86")
                    .name(project.android_avd_2)
                    .force()
                    .execute().await()
            }
        }
    }

    tests {
        droidiumTests {

            dataProvider {
                project.singleTest ? [ project.singleTest ] : project.droidiumTestProjects
            }

            beforeSuite {
                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_1)
                    .parameters(['-no-audio', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .execute().await()

                Tasks.prepare(AndroidEmulatorStarter)
                    .avd(project.android_avd_2)
                    .port(5556)
                    .parameters(['-no-audio', '-memory', project.emulatorMemory])
                    .timeout(project.emulatorTimeout)
                    .execute().await()
            }

            beforeTest { droidiumTest ->
                if (project.needAndroidTestApk.contains(droidiumTest)) {
                    project.ant.copy(file: new File(project.rootDir, "aerogear-test-android.apk"),
                        todir: new File(project.rootDir, droidiumTest),
                        failonerror: false,
                        overwrite: true)
                }
            }

            execute { droidiumTest ->
                Tasks.prepare(MavenExecutor).pom("${project.rootDir}/${droidiumTest}/pom.xml")
                    .goals('clean', 'test')
                    .property("android.avd.name=${project.android_avd_1}")
                    .property("android.avd.name_1=${project.android_avd_1}")
                    .property("android.avd.name_2=${project.android_avd_2}")
                    .property("arquillian.debug=${project.arquillian_debug}")
                    .env([ANDROID_HOME : project.spacelift.workspace.absolutePath + "/android-sdk-linux"])
                    .env([ANDROID_SDK_HOME : project.spacelift.workspace.absolutePath])
                    .env([TMPDIR : project.spacelift.workspace.absolutePath + "/.droidium_tmp"])
                    .execute().await()
            }

            afterTest { droidiumTest ->
                if (project.needAndroidTestApk.contains(droidiumTest)) {
                    File projectDir = new File(project.rootDir, droidiumTest)
                    project.ant.delete(file: new File(projectDir, "aerogear-test-android.apk"), failonerror: false)
                }
            }

            afterSuite {
                Tasks.prepare(AndroidEmulatorStopper).execute().await()
                Tasks.prepare(AndroidEmulatorStopper).device("emulator-5556").execute().await()

                FileUtils.listFiles(project.rootDir, null, true).each { file ->
                    if (!file.absolutePath.contains("target")
                        && !file.absolutePath.startsWith(project.spacelift.workspace.absolutePath)
                        && !file.absolutePath.startsWith(project.spacelift.installationsDir.absolutePath)) {

                        if (file.name.contains("arquillian.xml.backup") || file.name.contains("pom.xml.backup")) {
                            file.delete()
                        }

                        if (file.name.equals("pom.xml") || file.name.equals("arquillian.xml")) {
                            Tasks.prepare(CommandTool).programName("git").parameter("checkout").parameter(file.absolutePath).execute().await()
                        }
                    }   
                }
            }
        }
    }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.arquillian.spacelift.gradle:arquillian-spacelift-gradle:1.0.0-alpha-3'
        classpath 'commons-io:commons-io:2.4'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}
